#Key passed as argument and the inventory containing the nodes should be reachable
# (either as argument or in the correct folder)



# To add a new OS, simply create a {{ ansible_distribution }}Setup with the appropriate fields for
# 1-) libraries: List of names of packages to be installed
# 2-) LD_LIBRARY_PATH: Full path of the mpi library in the specified OS. That is where the library resides AFTER being installed by the package manager
#
- name: Loading os-specfic config details
  include_vars:
      file: "{{ ansible_distribution }}Setup.yml"
      name: osSetup


- name: passing key
  copy:
    src: "{{ ansible_ssh_private_key_file }}" #Key should be here
    dest: ~{{ user }}/.ssh/clusterKey
    mode: '0644'





- name: Ensure id_rsa exists
  file:
    path:  ~{{ user }}/.ssh/id_rsa
    state: touch


  #Blockinfile in ansible adds undisireble marker
- name: Append key to id_rsa
  become: yes
  shell: |
        cd ~{{ user }}/.ssh/
        cat clusterKey >> ~{{ user }}/.ssh/id_rsa


# - name: testing env variables
#   become: yes
#   shell: |
#         sudo apt-get update


- name: Update apt
  apt:
    update_cache: yes

- name: install the required package for OpenMPI
  become: yes
  package:
    name:
    - "{{ item  }}"

    state: latest

  loop: "{{ osSetup.libraries}}"
  register: resultMPI
#TODO: criar dicionario com o tipo da instancia e como o pacote se chama no respectivo sistema, na instancia AMI linux o nome eh "openmpi-devel", Com ubuntu o nome eh: openmpi-bin

# - name: Stop task
#   meta: end_play



- debug:
    msg: resultMPI.stdout

- name: Getting gcc, make
  become: yes
  package:
    name:   build-essential
    state: present




   #Aparentemente nao precisa escapar as aspas tal comando (e possiveis variacoes ) funcionam!
- name: testing env variables
  become: yes
  shell: |
        stringTemp="export LD_LIBRARY_PATH=/usr/lib/x86_64-linux-gnu/openmpi/lib
        " &&
        echo "$(echo -n "$stringTemp"; cat .bashrc)" > .bashrc

- name: Check whether the bin files were properly exported
  shell: "which -a orted"
  register: output

- name: Creates directory
  become: no
  file:
    path: ~/efs
    state: directory
    mode: "0755"

- name: Disable firewall (shotgun approach, in the future probably properly configure)
  become: yes
  shell: ufw disable



- name: Disable Strict Host Key Checking in SSH Config
  lineinfile: >
      dest=/etc/ssh/ssh_config
      line="StrictHostKeyChecking no"
      insertafter='EOF'
      state=present
